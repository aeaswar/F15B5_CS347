DROP SEQUENCE F15B5_RFE_seq ; 
create sequence F15B5_RFE_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15B5_RFE_PK_trig 
before insert on F15B5_RFE
for each row 
begin 
select F15B5_RFE_seq.nextval into :new.rfe_id from dual; 
end; 
/
alter table F15B5_RFE add created date ; 
alter table F15B5_RFE add created_by VARCHAR2 (255) ; 
alter table F15B5_RFE add row_version_number integer ; 
alter table F15B5_RFE add updated date ; 
alter table F15B5_RFE add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15B5_RFE_AUD_trig 
before insert or update on F15B5_RFE 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15B5_auth_seq ; 
create sequence F15B5_auth_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15B5_auth_PK_trig 
before insert on F15B5_auth
for each row 
begin 
select F15B5_auth_seq.nextval into :new.auth_id from dual; 
end; 
/
alter table F15B5_auth add created date ; 
alter table F15B5_auth add created_by VARCHAR2 (255) ; 
alter table F15B5_auth add row_version_number integer ; 
alter table F15B5_auth add updated date ; 
alter table F15B5_auth add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15B5_auth_AUD_trig 
before insert or update on F15B5_auth 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15B5_comm_seq ; 
create sequence F15B5_comm_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15B5_comm_PK_trig 
before insert on F15B5_comm
for each row 
begin 
select F15B5_comm_seq.nextval into :new.comm_id from dual; 
end; 
/
alter table F15B5_comm add created date ; 
alter table F15B5_comm add created_by VARCHAR2 (255) ; 
alter table F15B5_comm add row_version_number integer ; 
alter table F15B5_comm add updated date ; 
alter table F15B5_comm add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15B5_comm_AUD_trig 
before insert or update on F15B5_comm 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15B5_doc_seq ; 
create sequence F15B5_doc_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15B5_doc_PK_trig 
before insert on F15B5_doc
for each row 
begin 
select F15B5_doc_seq.nextval into :new.doc_id from dual; 
end; 
/
alter table F15B5_doc add created date ; 
alter table F15B5_doc add created_by VARCHAR2 (255) ; 
alter table F15B5_doc add row_version_number integer ; 
alter table F15B5_doc add updated date ; 
alter table F15B5_doc add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15B5_doc_AUD_trig 
before insert or update on F15B5_doc 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15B5_emp_seq ; 
create sequence F15B5_emp_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15B5_emp_PK_trig 
before insert on F15B5_emp
for each row 
begin 
select F15B5_emp_seq.nextval into :new.emp_id from dual; 
end; 
/
alter table F15B5_emp add created date ; 
alter table F15B5_emp add created_by VARCHAR2 (255) ; 
alter table F15B5_emp add row_version_number integer ; 
alter table F15B5_emp add updated date ; 
alter table F15B5_emp add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15B5_emp_AUD_trig 
before insert or update on F15B5_emp 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15B5_hist_seq ; 
create sequence F15B5_hist_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15B5_hist_PK_trig 
before insert on F15B5_hist
for each row 
begin 
select F15B5_hist_seq.nextval into :new.hist_id from dual; 
end; 
/
alter table F15B5_hist add created date ; 
alter table F15B5_hist add created_by VARCHAR2 (255) ; 
alter table F15B5_hist add row_version_number integer ; 
alter table F15B5_hist add updated date ; 
alter table F15B5_hist add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15B5_hist_AUD_trig 
before insert or update on F15B5_hist 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15B5_lab_seq ; 
create sequence F15B5_lab_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15B5_lab_PK_trig 
before insert on F15B5_lab
for each row 
begin 
select F15B5_lab_seq.nextval into :new.lab_id from dual; 
end; 
/
alter table F15B5_lab add created date ; 
alter table F15B5_lab add created_by VARCHAR2 (255) ; 
alter table F15B5_lab add row_version_number integer ; 
alter table F15B5_lab add updated date ; 
alter table F15B5_lab add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15B5_lab_AUD_trig 
before insert or update on F15B5_lab 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15B5_status_seq ; 
create sequence F15B5_status_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15B5_status_PK_trig 
before insert on F15B5_status
for each row 
begin 
select F15B5_status_seq.nextval into :new.status_id from dual; 
end; 
/
alter table F15B5_status add created date ; 
alter table F15B5_status add created_by VARCHAR2 (255) ; 
alter table F15B5_status add row_version_number integer ; 
alter table F15B5_status add updated date ; 
alter table F15B5_status add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15B5_status_AUD_trig 
before insert or update on F15B5_status 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15B5_task_seq ; 
create sequence F15B5_task_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15B5_task_PK_trig 
before insert on F15B5_task
for each row 
begin 
select F15B5_task_seq.nextval into :new.task_id from dual; 
end; 
/
alter table F15B5_task add created date ; 
alter table F15B5_task add created_by VARCHAR2 (255) ; 
alter table F15B5_task add row_version_number integer ; 
alter table F15B5_task add updated date ; 
alter table F15B5_task add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15B5_task_AUD_trig 
before insert or update on F15B5_task 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP INDEX F15B5_emp_emp_id_FK_0 ;
CREATE INDEX F15B5_emp_emp_id_FK_0 ON F15B5_RFE(F15B5_emp_emp_id) ;
DROP INDEX F15B5_status_status_id_FK_1 ;
CREATE INDEX F15B5_status_status_id_FK_1 ON F15B5_RFE(F15B5_status_status_id) ;
DROP INDEX F15B5_RFE_rfe_id_FK_2 ;
CREATE INDEX F15B5_RFE_rfe_id_FK_2 ON F15B5_comm(F15B5_RFE_rfe_id) ;
DROP INDEX F15B5_emp_emp_id_FK_3 ;
CREATE INDEX F15B5_emp_emp_id_FK_3 ON F15B5_comm(F15B5_emp_emp_id) ;
DROP INDEX F15B5_RFE_rfe_id_FK_4 ;
CREATE INDEX F15B5_RFE_rfe_id_FK_4 ON F15B5_doc(F15B5_RFE_rfe_id) ;
DROP INDEX F15B5_auth_auth_id_FK_5 ;
CREATE INDEX F15B5_auth_auth_id_FK_5 ON F15B5_emp(F15B5_auth_auth_id) ;
DROP INDEX F15B5_lab_lab_id_FK_6 ;
CREATE INDEX F15B5_lab_lab_id_FK_6 ON F15B5_emp(F15B5_lab_lab_id) ;
DROP INDEX F15B5_RFE_rfe_id_FK_7 ;
CREATE INDEX F15B5_RFE_rfe_id_FK_7 ON F15B5_hist(F15B5_RFE_rfe_id) ;
DROP INDEX F15B5_RFE_rfe_id_FK_8 ;
CREATE INDEX F15B5_RFE_rfe_id_FK_8 ON approvers(F15B5_RFE_rfe_id) ;
DROP INDEX F15B5_emp_emp_id_FK_9 ;
CREATE INDEX F15B5_emp_emp_id_FK_9 ON approvers(F15B5_emp_emp_id) ;
DROP INDEX F15B5_RFE_rfe_id_FK_10 ;
CREATE INDEX F15B5_RFE_rfe_id_FK_10 ON contacts(F15B5_RFE_rfe_id) ;
DROP INDEX F15B5_emp_emp_id_FK_11 ;
CREATE INDEX F15B5_emp_emp_id_FK_11 ON contacts(F15B5_emp_emp_id) ;
DROP INDEX F15B5_RFE_rfe_id_FK_12 ;
CREATE INDEX F15B5_RFE_rfe_id_FK_12 ON rfe_task(F15B5_RFE_rfe_id) ;
DROP INDEX F15B5_task_task_id_FK_13 ;
CREATE INDEX F15B5_task_task_id_FK_13 ON rfe_task(F15B5_task_task_id) ;
